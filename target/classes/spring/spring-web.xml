<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 配置SpringMVC -->
    <!-- 1:开启SpringMVC注解模式 -->
    <!-- 简化配置:
    (1)自动注册DefaultAnnotationHandlerMapping,AnnotationMethodHandlerAdapter
    (2)提供一系列:数据绑定,数字和日期的format @NumberFormat,@DataTimeFormat, xml,json默认读写支持.
    -->
    <mvc:annotation-driven/>
    <!--
    2:静态资源默认servlet配置
    (1):加入对静态资源的处理:js,gif,png
    (2):允许使用"/"做整体映射
    -->
    <mvc:default-servlet-handler/>
    <!--或者：-->
    <!-- 静态资源路径映射：把 "/WEB-INF/res" 路径映射为  "/resources"-->
    <!--<mvc:resources location="/WEB-INF/res" mapping="/resources"/>-->

    <!--3:配置html 显示ViewResolver -->
    <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">-->
        <!--<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>-->
        <!--<property name="prefix" value="/WEB-INF/html/"/>-->
        <!--<property name="suffix" value=".html"/>-->

    <!--</bean>-->

    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix"> <value>/WEB-INF/web/jsp/</value> </property>
        <property name="suffix"> <value>.jsp</value> </property>
        <property name="order" value="0" />
    </bean>

    <!--4:扫描web相关的bean -->
    <context:component-scan base-package="com.material.*.web"/>

    <!--SpringMVC 拦截器-->
    <mvc:interceptors>
        <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
        <!--<bean class="com.material.interceptor.RootInterceptor"/>-->
        <mvc:interceptor>
            <mvc:mapping path="/user/page/*"/>
            <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
            <bean class="com.material.interceptor.RootInterceptor"/>
        </mvc:interceptor>

        <mvc:interceptor>
            <mvc:mapping path="/plan/page/*"/>
            <bean class="com.material.interceptor.PlannerInterceptor"/>
        </mvc:interceptor>

        <mvc:interceptor>
            <mvc:mapping path="/QRname/page/*"/>
            <bean class="com.material.interceptor.PlannerInterceptor"/>
        </mvc:interceptor>

        <mvc:interceptor>
            <mvc:mapping path="/order/page/*"/>
            <bean class="com.material.interceptor.WareInterceptor"/>
        </mvc:interceptor>

        <mvc:interceptor>
            <mvc:mapping path="/inventory/page/*"/>
            <bean class="com.material.interceptor.WareInterceptor"/>
        </mvc:interceptor>

        <mvc:interceptor>
            <mvc:mapping path="/order_track/page/*"/>
            <bean class="com.material.interceptor.WareInterceptor"/>
        </mvc:interceptor>

    </mvc:interceptors>

</beans>